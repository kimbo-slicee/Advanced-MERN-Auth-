openapi: 3.0.0
info:
  title: API Documentation
  description: Comprehensive API documentation for authentication and user management routes.
  version: 1.0.0
servers:
  - url: http://localhost:5000/api/v1
paths:
  # Authentication Routes
  /auth/login:
    post:
      summary: Login
      description: User login with email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Successful login
        '400':
          description: Invalid input

  /auth/signup:
    post:
      summary: Signup
      description: Register a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
      responses:
        '201':
          description: User successfully registered
        '400':
          description: Validation error

  /auth/logout:
    post:
      summary: Logout
      description: Logout the authenticated user.
      responses:
        '200':
          description: Successfully logged out

  /auth/verification:
    post:
      summary: Email Verification
      description: Send a verification email to the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: 123456
      responses:
        '200':
          description: Verification successful
        '400':
          description: Invalid code

  /auth/forgot-password:
    post:
      summary: Forgot Password
      description: Send a password reset link to the user's email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
      responses:
        '200':
          description: Reset link sent
        '400':
          description: Invalid email

  /auth/forgot-password/{token}:
    post:
      summary: Reset Password
      description: Reset the user's password using the provided token.
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
            example: abcd1234
          description: Password reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  example: newpassword123
      responses:
        '200':
          description: Password successfully reset
        '400':
          description: Invalid token or input

  # User Routes
  /user/profile:
    get:
      summary: Get User Profile
      description: Retrieve the authenticated user's profile.
      responses:
        '200':
          description: User profile details
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: John Doe
                    email:
                      type: string
                      example: user@example.com
                    createdAt:
                      type: string
                      example: 2021-01-01T00:00:00.000Z
                    updatedAt:
                      type: string
                      example: 2021-01-01T00:00:00.000Z
        '401':
            description: Unauthorized
        '404':
            description: User not found
        '500':
            description: Internal server error


#  /user/{id}:
#    get:
#      summary: Get User by ID
#      description: Retrieve user details by their ID.
#      parameters:
#        - in: path
#          name: id
#          required: true
#          schema:
#            type: integer
#            example: 1
#          description: The ID of the user.
#      responses:
#        '200':
#          description: User details
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  id:
#                    type: integer
#                    example: 1
#                  name:
#                    type: string
#                    example: John Doe
#                  email:
#                    type: string
#                    example: user@example.com
#        '404':
#          description: User not found
#
#  /user:
#    post:
#      summary: Create a New User
#      description: Add a new user to the system.
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              type: object
#              properties:
#                name:
#                  type: string
#                  example: Jane Doe
#                email:
#                  type: string
#                  example: jane@example.com
#                password:
#                  type: string
#                  example: password123
#      responses:
#        '201':
#          description: User created successfully
#        '400':
#          description: Validation error

#  /user/{id}:
#    put:
#      summary: Update User
#      description: Update a user's details.
#      parameters:
#        - in: path
#          name: id
#          required: true
#          schema:
#            type: integer
#            example: 1
#          description: The ID of the user.
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              type: object
#              properties:
#                name:
#                  type: string
#                  example: John Updated
#                email:
#                  type: string
#                  example: john.updated@example.com
#      responses:
#        '200':
#          description: User updated successfully
#        '400':
#          description: Validation error
#        '404':
#          description: User not found
#
#  /user/{id}:
#    delete:
#      summary: Delete User
#      description: Remove a user from the system.
#      parameters:
#        - in: path
#          name: id
#          required: true
#          schema:
#            type: integer
#            example: 1
#          description: The ID of the user.
#      responses:
#        '200':
#          description: User deleted successfully
#        '404':
#          description: User not found
